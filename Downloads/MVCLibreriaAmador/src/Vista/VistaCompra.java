package Vista;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import Controlador.CompraController;
import Modelo.Compra;
import Modelo.DetalleCompra;
import Util.ConexionDB; // NOTA: faltaba importar esta clase
import java.sql.*;      // NOTA: importé todo sql porque usas Connection, PreparedStatement, ResultSet, SQLException
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;  // NOTA: faltaba importar ArrayList
import java.util.Date;
import java.util.List;

/**
 *
 * @author suare
 */
public class VistaCompra extends javax.swing.JPanel {

    private final CompraController controlador = new CompraController();
    private int idCompraSeleccionada = -1;

    public VistaCompra() throws SQLException {
        initComponents();
        cargarTabla();

        // Listener para selección de fila en la tabla
        jTableCompra.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int fila = jTableCompra.getSelectedRow();
                if (fila != -1) {
                    // Asumiendo columnas: 0=IDCompra, 1=IDProveedor, 2=FechaCompra
                    idCompraSeleccionada = (int) jTableCompra.getValueAt(fila, 0);
                    jTextFieldIDCompra.setText(String.valueOf(idCompraSeleccionada));

                    int idProveedor = (int) jTableCompra.getValueAt(fila, 1);
                    jTextFieldIDProveedor.setText(String.valueOf(idProveedor));

                    Object fechaObj = jTableCompra.getValueAt(fila, 2);
                    if (fechaObj instanceof Date) {
                        jDateChooser1.setDate((Date) fechaObj);
                    } else {
                        jDateChooser1.setDate(null); // o manejar formato String si necesario
                    }
                }
            }
        });
    }

    private void limpiarCampos() {
        jTextFieldIDCompra.setText("");
        jTextFieldIDProveedor.setText("");
        jDateChooser1.setDate(null);
        idCompraSeleccionada = -1;
        jTableCompra.clearSelection();
    }

    private void cargarTabla() {
        DefaultTableModel model = (DefaultTableModel) jTableCompra.getModel();
        model.setRowCount(0);

        List<Compra> compras = controlador.obtenerTodasCompras();
        if (compras != null) {
            for (Compra c : compras) {
                model.addRow(new Object[]{
                    c.getIdCompra(),
                    c.getIdProveedor(),
                    c.getFechaCompra()
                });
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldIDCompra = new javax.swing.JTextField();
        jTextFieldIDProveedor = new javax.swing.JTextField();
        jTextFieldBuscar = new javax.swing.JTextField();
        jButtonGuardar = new javax.swing.JButton();
        jButtonBuscar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jButtonActualizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCompra = new javax.swing.JTable();
        jButtonLimpiar = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();

        setBackground(new java.awt.Color(40, 86, 115));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("ID Compra");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Fecha");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("ID Proveedor");

        jTextFieldIDCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldIDCompraActionPerformed(evt);
            }
        });

        jTextFieldIDProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldIDProveedorActionPerformed(evt);
            }
        });

        jTextFieldBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldBuscarActionPerformed(evt);
            }
        });

        jButtonGuardar.setBackground(new java.awt.Color(58, 114, 142));
        jButtonGuardar.setForeground(new java.awt.Color(255, 255, 255));
        jButtonGuardar.setText("Guardar");
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });

        jButtonBuscar.setBackground(new java.awt.Color(58, 114, 142));
        jButtonBuscar.setForeground(new java.awt.Color(255, 255, 255));
        jButtonBuscar.setText("Buscar");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        jButtonEliminar.setBackground(new java.awt.Color(58, 114, 142));
        jButtonEliminar.setForeground(new java.awt.Color(255, 255, 255));
        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        jButtonActualizar.setBackground(new java.awt.Color(58, 114, 142));
        jButtonActualizar.setForeground(new java.awt.Color(255, 255, 255));
        jButtonActualizar.setText("Actualizar");
        jButtonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizarActionPerformed(evt);
            }
        });

        jTableCompra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID Compra", "Fecha", "ID Proveedor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableCompra);

        jButtonLimpiar.setBackground(new java.awt.Color(58, 114, 142));
        jButtonLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        jButtonLimpiar.setText("Limpiar");
        jButtonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel5))
                                        .addGap(17, 17, 17))
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextFieldIDProveedor)
                                    .addComponent(jTextFieldIDCompra, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                                    .addComponent(jDateChooser1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonBuscar)
                                .addGap(26, 26, 26)
                                .addComponent(jTextFieldBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonGuardar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonLimpiar)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButtonEliminar)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonActualizar))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldIDCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldIDProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))))
                .addGap(3, 3, 3)
                .addComponent(jButtonLimpiar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBuscar)
                    .addComponent(jButtonGuardar)
                    .addComponent(jButtonEliminar)
                    .addComponent(jButtonActualizar))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldIDCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldIDCompraActionPerformed

    }//GEN-LAST:event_jTextFieldIDCompraActionPerformed

    private void jTextFieldIDProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldIDProveedorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldIDProveedorActionPerformed

    private void jTextFieldBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldBuscarActionPerformed
        // TODO add your handling code here:
        String texto = jTextFieldBuscar.getText().toLowerCase();
        DefaultTableModel model = (DefaultTableModel) jTableCompra.getModel();
        model.setRowCount(0);

        List<Compra> compras = controlador.obtenerTodasCompras();
        for (Compra c : compras) {
            // Suponiendo que buscas por idProveedor convertido a texto o por fecha como texto
            String idProveedorStr = String.valueOf(c.getIdProveedor());
            String fechaStr = c.getFechaCompra().toString(); // puedes formatear si quieres
            if (idProveedorStr.toLowerCase().contains(texto) || fechaStr.toLowerCase().contains(texto)) {
                model.addRow(new Object[]{
                    c.getIdCompra(),
                    c.getFechaCompra(),
                    c.getIdProveedor()
                });
            }
        }
    }//GEN-LAST:event_jTextFieldBuscarActionPerformed

    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
        // TODO add your handling code here:
        try {
            int idProveedor = Integer.parseInt(jTextFieldIDProveedor.getText());
            Date fechaCompra = jDateChooser1.getDate();

            if (fechaCompra == null) {
                JOptionPane.showMessageDialog(this, "Por favor selecciona una fecha de compra.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            List<DetalleCompra> detalles = null;

            controlador.crearCompra(idProveedor, fechaCompra, detalles);

            limpiarCampos();
            cargarTabla();

            JOptionPane.showMessageDialog(this, "Compra guardada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID del proveedor no válido.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al guardar la compra: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonGuardarActionPerformed

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        String texto = jTextFieldBuscar.getText().toLowerCase();
        DefaultTableModel model = (DefaultTableModel) jTableCompra.getModel();
        model.setRowCount(0);

        List<Compra> compras = controlador.obtenerTodasCompras();
        for (Compra c : compras) {
            String idProveedorStr = String.valueOf(c.getIdProveedor());
            if (idProveedorStr.contains(texto)) {
                model.addRow(new Object[]{
                    c.getIdCompra(),
                    c.getFechaCompra(),
                    c.getIdProveedor()
                });
            }
        }
    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        // TODO add your handling code here:
        if (idCompraSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione una compra para eliminar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
                "¿Está seguro de eliminar la compra seleccionada?",
                "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            controlador.eliminarCompra(idCompraSeleccionada);
            limpiarCampos();
            cargarTabla();
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jButtonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizarActionPerformed
        // TODO add your handling code here:
        if (idCompraSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona una compra para actualizar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int idProveedor = Integer.parseInt(jTextFieldIDProveedor.getText());
            Date fechaCompra = jDateChooser1.getDate();

            if (fechaCompra == null) {
                JOptionPane.showMessageDialog(this, "Selecciona una fecha válida.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            controlador.actualizarCompra(idCompraSeleccionada, idProveedor, fechaCompra);
            limpiarCampos();
            cargarTabla();

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El ID del proveedor debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonActualizarActionPerformed

    private void jButtonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimpiarActionPerformed
        jTextFieldIDCompra.setText("");
        jTextFieldIDProveedor.setText("");
        jDateChooser1.setDate(null);
        jTableCompra.clearSelection();
        idCompraSeleccionada = -1;
    }//GEN-LAST:event_jButtonLimpiarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonActualizar;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JButton jButtonLimpiar;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableCompra;
    private javax.swing.JTextField jTextFieldBuscar;
    private javax.swing.JTextField jTextFieldIDCompra;
    private javax.swing.JTextField jTextFieldIDProveedor;
    // End of variables declaration//GEN-END:variables
}
